// DO NOT MODIFY THIS FILE; automatically generated by MMS
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using System.Linq.Expressions;
using System.Linq;
using Microarea.Tbf.Model;
using Microarea.Tbf.Model.API;
using Microarea.Tbf.Model.Database;
using Microarea.Tbf.Model.Interfaces;
using Microarea.Tbf.Model.Interfaces.Database;
using Microarea.Tbf.Model.Interfaces.API;
using System.Threading.Tasks;
using Microarea.Generic.DataObj;

namespace Courses.Courses.Model
{
	
	/// <summary>
	/// Courses details table
	/// </summary>
	public partial class MMS_CoursesDetailsObj  : BaseEntity
	{
		public MMS_CoursesDetailsObj()
		{
		}

		/// <summary>
		/// CourseId field primary key segment
		/// This property is a primary Key 	
		/// DefaultValue: 0
		/// </summary>
		[TbPrimaryKey(0)]

		public Int32 CourseId { get =>  f_CourseId.TypedDBValue;  set { f_CourseId.TypedDBValue = value; } }
		/// <summary>
		/// property exposed for value management and field entity
		/// </summary>
		[NotMapped]
		public DataLng f_CourseId { get ; private set; } = new DataLng();



		/// <summary>
		/// Line field primary key segmnet
		/// This property is a primary Key 	
		/// DefaultValue: 0
		/// </summary>
		[TbPrimaryKey(1)]

		public Int16 Line { get =>  f_Line.TypedDBValue;  set { f_Line.TypedDBValue = value; } }
		/// <summary>
		/// property exposed for value management and field entity
		/// </summary>
		[NotMapped]
		public DataInt f_Line { get ; private set; } = new DataInt();



		/// <summary>
		/// CustSuppType field
		/// 	
		/// DefaultValue: 3211264
		/// </summary>

		public int? CustSuppType { get =>  f_CustSuppType.TypedDBValue;  set { f_CustSuppType.TypedDBValue = value.Value; } }
		/// <summary>
		/// property exposed for value management and field entity
		/// </summary>
		[NotMapped]
		public DataEnum f_CustSuppType { get ; private set; } = new DataEnum(3211264);



		/// <summary>
		/// CustSupp field
		/// 	
		/// DefaultValue: ""
		/// </summary>

		public string? CustSupp { get =>  f_CustSupp.TypedDBValue;  set { f_CustSupp.TypedDBValue = value; } }
		/// <summary>
		/// property exposed for value management and field entity
		/// </summary>
		[NotMapped]
		public DataStr f_CustSupp { get ; private set; } = new DataStr();



		/// <summary>
		/// Invoiced field
		/// 	
		/// DefaultValue: false
		/// </summary>

		public bool? Invoiced { get =>  f_Invoiced.TypedDBValue;  set { f_Invoiced.TypedDBValue = value.Value; } }
		/// <summary>
		/// property exposed for value management and field entity
		/// </summary>
		[NotMapped]
		public DataBool f_Invoiced { get ; private set; } = new DataBool();



		/// <summary>
		/// Days field
		/// 	
		/// DefaultValue: 0
		/// </summary>

		public Int16? Days { get =>  f_Days.TypedDBValue;  set { f_Days.TypedDBValue = value.Value; } }
		/// <summary>
		/// property exposed for value management and field entity
		/// </summary>
		[NotMapped]
		public DataInt f_Days { get ; private set; } = new DataInt();



		/// <summary>
		/// Notes field
		/// 	
		/// DefaultValue: ""
		/// </summary>

		public string? Notes { get =>  f_Notes.TypedDBValue;  set { f_Notes.TypedDBValue = value; } }
		/// <summary>
		/// property exposed for value management and field entity
		/// </summary>
		[NotMapped]
		public DataStr f_Notes { get ; private set; } = new DataStr();




	}	

	[Table("MMS_CoursesDetails")]
    [TbEntityTypeConfiguration(typeof(MMS_CoursesDetailsConfiguration))]
	public partial class MMS_CoursesDetails : MMS_CoursesDetailsObj
	{
		public MMS_CoursesDetails()
			:base()
		{
		}
	}

	public sealed class MMS_CoursesDetailsConfiguration : MMS_CoursesDetailsConfiguration<MMS_CoursesDetails>
	{
		public MMS_CoursesDetailsConfiguration(DbType dbType, string subscription) 
			: base(dbType, subscription)
		{
		}

		public override void Configure(EntityTypeBuilder<MMS_CoursesDetails> entity)
		{
			base.Configure(entity);
		}
	}

	public class MMS_CoursesDetailsConfiguration<TEntity> : AbstractEntityTypeConfiguration<TEntity> where TEntity : MMS_CoursesDetailsObj
    {
        public MMS_CoursesDetailsConfiguration(DbType dbType, string subscription)
            :base(dbType, subscription)
        {
        }

        public override void Configure(EntityTypeBuilder<TEntity> entity)
        { 
		
		#if NET6_0 || NET8_0 || NETCOREAPP3_1 || NETSTANDARD2_1
			entity.HasKey(e => new { e.CourseId,e.Line }).HasName("PK_MMS_CoursesDetails").IsClustered(false);
		#else
			entity.HasKey(e => new { e.CourseId,e.Line }).HasName("PK_MMS_CoursesDetails").ForSqlServerIsClustered(false);
		#endif

           
			#region Columns

			if(Database.IsSqlServer())
			{	
					entity.Property(e => e.CourseId).HasDefaultValueSql("('0')").ValueGeneratedNever()  ;
					entity.Property(e => e.Line).HasDefaultValueSql("('0')").ValueGeneratedNever()  ;
					entity.Property(e => e.CustSuppType).HasDefaultValueSql("(3211264)")  ;
					entity.Property(e => e.CustSupp).HasMaxLength(12).HasDefaultValueSql("('')")  ;
					entity.Property(e => e.Invoiced).HasConversion(new BoolToTwoValuesConverter<char>('0', '1')).HasColumnType("nchar(1)")  ;
					entity.Property(e => e.Days).HasDefaultValueSql("('0')")  ;
					entity.Property(e => e.Notes).HasColumnType("ntext").HasDefaultValueSql("('')")  ;
			
					entity.Property(e => e.TbCreated).IsRequired().HasColumnType("datetime").HasDefaultValueSql("getutcdate()");
					entity.Property(e => e.TbModified).IsRequired().HasColumnType("datetime").HasDefaultValueSql("getutcdate()");
					entity.Property(e => e.TbCreatedId).IsRequired().HasDefaultValueSql("0");
					entity.Property(e => e.TbModifiedId).IsRequired().HasDefaultValueSql("0");
			}

			if(Database.IsNpgsql())
			{	
					entity.Property(e => e.CourseId).HasColumnType("integer").HasDefaultValueSql("('0')").ValueGeneratedNever()  ;
					entity.Property(e => e.Line).HasColumnType("smallint").HasDefaultValueSql("('0')").ValueGeneratedNever()  ;
					entity.Property(e => e.CustSuppType).HasDefaultValueSql("(3211264)")  ;
					entity.Property(e => e.CustSupp).HasMaxLength(12).HasDefaultValueSql("('')")  ;
					entity.Property(e => e.Invoiced).HasConversion(new BoolToTwoValuesConverter<char>('0', '1')).HasColumnType("char(1)")  ;
					entity.Property(e => e.Days).HasColumnType("smallint").HasDefaultValueSql("('0')")  ;
					entity.Property(e => e.Notes).HasColumnType("Text").HasDefaultValueSql("('')")  ;
			
					entity.Property(e => e.TbCreated).IsRequired().HasColumnType("TIMESTAMP").HasDefaultValueSql("CURRENT_TIMESTAMP") ; 
					entity.Property(e => e.TbModified).IsRequired().HasColumnType("TIMESTAMP").HasDefaultValueSql("CURRENT_TIMESTAMP") ;
					entity.Property(e => e.TbCreatedId).IsRequired().HasDefaultValueSql("0");
					entity.Property(e => e.TbModifiedId).IsRequired().HasDefaultValueSql("0");
			}

			#endregion

			#region FK
			#endregion

			//AbstractEntityTypeConfiguration Method per AddOnField
			CheckConfiguration(entity);
		}
	}

	/// <summary>
	/// This Aggregate is used to read record based on PrimaryKey of table MMS_CoursesDetails
	/// </summary>
	public class MMS_CoursesDetailsAggregate<TContext> : BaseTbAggregate<TContext, MMS_CoursesDetails>
                                                                            where TContext : TbDbContext
    {
        public MMS_CoursesDetailsAggregate(TContext context, ITbDiagnostic diagnostic) 
            : base(context, diagnostic)
        {
        }

		private IQueryable<MMS_CoursesDetails> Query(Int32 courseId,Int16 line)
			=> EntityDbSet.Where(x => x.CourseId == courseId && x.Line == line);

		#region SyncMethods 
		/// <summary>
		/// Return MMS_CoursesDetails based on primary key parameters or default of TResult if not found 
		/// </summary>
		/// <remarks>be careful on default of TResult of non reference types.</remarks>
		/// <typeparam name="TResult">Generic TResult</typeparam>
		
		/// <param name="courseId">CourseId field primary key segment</param>
		
		/// <param name="line">Line field primary key segmnet</param>
		
		/// <param name="selector">Project the founded element into a new form.</param>
		/// <param name="default">default value returned if no value is found</param>
		/// <returns>TResult based on projection function 'selector' or default if not found</returns>
        /// <exception cref="InvalidOperationException">Throw when result has more than one element.</exception>
        public TResult GetMMS_CoursesDetails<TResult>(Int32 courseId,Int16 line,
		                                       Expression<Func<MMS_CoursesDetails, TResult>> selector, TResult @default = default)		
			=> Result(Query(courseId,line).Select(selector), @default);

		/// <summary>
		/// Return ITbResult of MMS_CoursesDetails based on primary key parameters
		/// </summary>
		/// <typeparam name="TResult">Generic TResult</typeparam>
		
		/// <param name="courseId">CourseId field primary key segment</param>
		
		/// <param name="line">Line field primary key segmnet</param>
		
		/// <param name="selector">Project the founded element into a new form.</param>
		/// <param name="default">default value returned if no value is found</param>
		/// <returns>ITbResult based on projection function 'selector'</returns>
        /// <exception cref="InvalidOperationException">Throw when result has more than one element.</exception>
        public ITbResult<TResult> GetMMS_CoursesDetailsTbResult<TResult>(Int32 courseId,Int16 line,
		                                                          Expression<Func<MMS_CoursesDetails, TResult>> selector, TResult @default = default)
			=> TbResult(Query(courseId,line).Select(selector), @default);

		/// <summary>
		/// Return MMS_CoursesDetails based on primary key parameters default of MMS_CoursesDetails if not found
		/// </summary>
        /// <remarks>Prefered to use GetMMS_CoursesDetails with selector parameter</remarks>
		
		/// <param name="courseId">CourseId field primary key segment</param>
		
		/// <param name="line">Line field primary key segmnet</param>
		
		/// <param name="default">default value returned if no value is found</param>
		/// <returns>An istance of MMS_CoursesDetails or default if not found</returns>
        /// <exception cref="InvalidOperationException">Throw when result has more than one element.</exception>
        [Obsolete("Prefered to use GetMMS_CoursesDetails with selector parameter")]
        public MMS_CoursesDetails GetMMS_CoursesDetails(Int32 courseId,Int16 line,
												   MMS_CoursesDetails @default = default)
			=> Result(Query(courseId,line), @default);
		#endregion


		#region AsyncMethods
		/// <summary>
		/// Return MMS_CoursesDetails based on primary key parameters or default of TResult if not found with Async method
		/// </summary>
		/// <remarks>be careful on default of TResult of non reference types.</remarks>
		/// <typeparam name="TResult">Generic TResult</typeparam>
		
		/// <param name="courseId">CourseId field primary key segment</param>
		
		/// <param name="line">Line field primary key segmnet</param>
		
		/// <param name="selector">Project the founded element into a new form.</param>
		/// <param name="default">default value returned if no value is found</param>
		/// <returns>TResult based on projection function 'selector' or default if not found</returns>
        /// <exception cref="InvalidOperationException">Throw when result has more than one element.</exception>
        public Task<TResult> GetMMS_CoursesDetailsAsync<TResult>(Int32 courseId,Int16 line,
		                                       Expression<Func<MMS_CoursesDetails, TResult>> selector, TResult @default = default)		
			=> ResultAsync(Query(courseId,line).Select(selector), @default);

		/// <summary>
		/// Return ITbResult of MMS_CoursesDetails based on primary key parameters with Async method
		/// </summary>
		/// <typeparam name="TResult">Generic TResult</typeparam>
		
		/// <param name="courseId">CourseId field primary key segment</param>
		
		/// <param name="line">Line field primary key segmnet</param>
		
		/// <param name="selector">Project the founded element into a new form.</param>
		/// <param name="default">default value returned if no value is found</param>
		/// <returns>ITbResult based on projection function 'selector'</returns>
        /// <exception cref="InvalidOperationException">Throw when result has more than one element.</exception>
        public Task<ITbResult<TResult>> GetMMS_CoursesDetailsTbResultAsync<TResult>(Int32 courseId,Int16 line,
		                                                          Expression<Func<MMS_CoursesDetails, TResult>> selector, TResult @default = default)
			=> TbResultAsync(Query(courseId,line).Select(selector), @default);

		/// <summary>
		/// Return MMS_CoursesDetails based on primary key parameters default of MMS_CoursesDetails if not found with Async method
		/// </summary>
        /// <remarks>Prefered to use GetMMS_CoursesDetails with selector parameter</remarks>
		
		/// <param name="courseId">CourseId field primary key segment</param>
		
		/// <param name="line">Line field primary key segmnet</param>
		
		/// <param name="default">default value returned if no value is found</param>
		/// <returns>An istance of MMS_CoursesDetails or default if not found</returns>
        /// <exception cref="InvalidOperationException">Throw when result has more than one element.</exception>
        [Obsolete("Prefered to use GetMMS_CoursesDetails with selector parameter")]
        public Task<MMS_CoursesDetails> GetMMS_CoursesDetailsAsync(Int32 courseId,Int16 line,
												   MMS_CoursesDetails @default = default)
			=> ResultAsync(Query(courseId,line), @default);

		#endregion 
		
    }

}